package example.common_base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import example.common_base.entity.ChatMessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_ENTITY".
*/
public class ChatMessageEntityDao extends AbstractDao<ChatMessageEntity, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_ENTITY";

    /**
     * Properties of entity ChatMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ChatRoomID = new Property(0, Long.class, "chatRoomID", false, "CHAT_ROOM_ID");
        public final static Property MessageID = new Property(1, Long.class, "messageID", true, "_id");
        public final static Property MessageContentType = new Property(2, int.class, "messageContentType", false, "MESSAGE_CONTENT_TYPE");
        public final static Property MessageStatus = new Property(3, int.class, "messageStatus", false, "MESSAGE_STATUS");
        public final static Property MessageLayoutType = new Property(4, int.class, "messageLayoutType", false, "MESSAGE_LAYOUT_TYPE");
        public final static Property FromUserID = new Property(5, Long.class, "fromUserID", false, "FROM_USER_ID");
        public final static Property Taker = new Property(6, String.class, "taker", false, "TAKER");
        public final static Property SessionTakerID = new Property(7, long.class, "sessionTakerID", false, "SESSION_TAKER_ID");
        public final static Property UserHeadURL = new Property(8, String.class, "userHeadURL", false, "USER_HEAD_URL");
        public final static Property SendDate = new Property(9, long.class, "sendDate", false, "SEND_DATE");
        public final static Property VoiceFilePath = new Property(10, String.class, "voiceFilePath", false, "VOICE_FILE_PATH");
        public final static Property Duration = new Property(11, int.class, "duration", false, "DURATION");
        public final static Property IsPlaying = new Property(12, boolean.class, "isPlaying", false, "IS_PLAYING");
        public final static Property TextContent = new Property(13, String.class, "textContent", false, "TEXT_CONTENT");
        public final static Property ImageUrl = new Property(14, String.class, "imageUrl", false, "IMAGE_URL");
    }


    public ChatMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_ENTITY\" (" + //
                "\"CHAT_ROOM_ID\" INTEGER," + // 0: chatRoomID
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: messageID
                "\"MESSAGE_CONTENT_TYPE\" INTEGER NOT NULL ," + // 2: messageContentType
                "\"MESSAGE_STATUS\" INTEGER NOT NULL ," + // 3: messageStatus
                "\"MESSAGE_LAYOUT_TYPE\" INTEGER NOT NULL ," + // 4: messageLayoutType
                "\"FROM_USER_ID\" INTEGER," + // 5: fromUserID
                "\"TAKER\" TEXT," + // 6: taker
                "\"SESSION_TAKER_ID\" INTEGER NOT NULL ," + // 7: sessionTakerID
                "\"USER_HEAD_URL\" TEXT," + // 8: userHeadURL
                "\"SEND_DATE\" INTEGER NOT NULL ," + // 9: sendDate
                "\"VOICE_FILE_PATH\" TEXT," + // 10: voiceFilePath
                "\"DURATION\" INTEGER NOT NULL ," + // 11: duration
                "\"IS_PLAYING\" INTEGER NOT NULL ," + // 12: isPlaying
                "\"TEXT_CONTENT\" TEXT," + // 13: textContent
                "\"IMAGE_URL\" TEXT);"); // 14: imageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageEntity entity) {
        stmt.clearBindings();
 
        Long chatRoomID = entity.getChatRoomID();
        if (chatRoomID != null) {
            stmt.bindLong(1, chatRoomID);
        }
 
        Long messageID = entity.getMessageID();
        if (messageID != null) {
            stmt.bindLong(2, messageID);
        }
        stmt.bindLong(3, entity.getMessageContentType());
        stmt.bindLong(4, entity.getMessageStatus());
        stmt.bindLong(5, entity.getMessageLayoutType());
 
        Long fromUserID = entity.getFromUserID();
        if (fromUserID != null) {
            stmt.bindLong(6, fromUserID);
        }
 
        String taker = entity.getTaker();
        if (taker != null) {
            stmt.bindString(7, taker);
        }
        stmt.bindLong(8, entity.getSessionTakerID());
 
        String userHeadURL = entity.getUserHeadURL();
        if (userHeadURL != null) {
            stmt.bindString(9, userHeadURL);
        }
        stmt.bindLong(10, entity.getSendDate());
 
        String voiceFilePath = entity.getVoiceFilePath();
        if (voiceFilePath != null) {
            stmt.bindString(11, voiceFilePath);
        }
        stmt.bindLong(12, entity.getDuration());
        stmt.bindLong(13, entity.getIsPlaying() ? 1L: 0L);
 
        String textContent = entity.getTextContent();
        if (textContent != null) {
            stmt.bindString(14, textContent);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(15, imageUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageEntity entity) {
        stmt.clearBindings();
 
        Long chatRoomID = entity.getChatRoomID();
        if (chatRoomID != null) {
            stmt.bindLong(1, chatRoomID);
        }
 
        Long messageID = entity.getMessageID();
        if (messageID != null) {
            stmt.bindLong(2, messageID);
        }
        stmt.bindLong(3, entity.getMessageContentType());
        stmt.bindLong(4, entity.getMessageStatus());
        stmt.bindLong(5, entity.getMessageLayoutType());
 
        Long fromUserID = entity.getFromUserID();
        if (fromUserID != null) {
            stmt.bindLong(6, fromUserID);
        }
 
        String taker = entity.getTaker();
        if (taker != null) {
            stmt.bindString(7, taker);
        }
        stmt.bindLong(8, entity.getSessionTakerID());
 
        String userHeadURL = entity.getUserHeadURL();
        if (userHeadURL != null) {
            stmt.bindString(9, userHeadURL);
        }
        stmt.bindLong(10, entity.getSendDate());
 
        String voiceFilePath = entity.getVoiceFilePath();
        if (voiceFilePath != null) {
            stmt.bindString(11, voiceFilePath);
        }
        stmt.bindLong(12, entity.getDuration());
        stmt.bindLong(13, entity.getIsPlaying() ? 1L: 0L);
 
        String textContent = entity.getTextContent();
        if (textContent != null) {
            stmt.bindString(14, textContent);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(15, imageUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public ChatMessageEntity readEntity(Cursor cursor, int offset) {
        ChatMessageEntity entity = new ChatMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // chatRoomID
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // messageID
            cursor.getInt(offset + 2), // messageContentType
            cursor.getInt(offset + 3), // messageStatus
            cursor.getInt(offset + 4), // messageLayoutType
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // fromUserID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taker
            cursor.getLong(offset + 7), // sessionTakerID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // userHeadURL
            cursor.getLong(offset + 9), // sendDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // voiceFilePath
            cursor.getInt(offset + 11), // duration
            cursor.getShort(offset + 12) != 0, // isPlaying
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // textContent
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // imageUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageEntity entity, int offset) {
        entity.setChatRoomID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMessageID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMessageContentType(cursor.getInt(offset + 2));
        entity.setMessageStatus(cursor.getInt(offset + 3));
        entity.setMessageLayoutType(cursor.getInt(offset + 4));
        entity.setFromUserID(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setTaker(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSessionTakerID(cursor.getLong(offset + 7));
        entity.setUserHeadURL(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSendDate(cursor.getLong(offset + 9));
        entity.setVoiceFilePath(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDuration(cursor.getInt(offset + 11));
        entity.setIsPlaying(cursor.getShort(offset + 12) != 0);
        entity.setTextContent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setImageUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageEntity entity, long rowId) {
        entity.setMessageID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageEntity entity) {
        if(entity != null) {
            return entity.getMessageID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageEntity entity) {
        return entity.getMessageID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
