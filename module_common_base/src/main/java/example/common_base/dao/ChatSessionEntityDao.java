package example.common_base.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import example.common_base.convertor.StringlistConvertToStringConvertor;
import java.util.ArrayList;

import example.common_base.entity.ChatSessionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_SESSION_ENTITY".
*/
public class ChatSessionEntityDao extends AbstractDao<ChatSessionEntity, Long> {

    public static final String TABLENAME = "CHAT_SESSION_ENTITY";

    /**
     * Properties of entity ChatSessionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Type = new Property(0, int.class, "type", false, "TYPE");
        public final static Property SessionID = new Property(1, Long.class, "sessionID", true, "_id");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Time = new Property(3, long.class, "time", false, "TIME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property GroupHeads = new Property(5, String.class, "groupHeads", false, "GROUP_HEADS");
    }

    private final StringlistConvertToStringConvertor groupHeadsConverter = new StringlistConvertToStringConvertor();

    public ChatSessionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChatSessionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_SESSION_ENTITY\" (" + //
                "\"TYPE\" INTEGER NOT NULL ," + // 0: type
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: sessionID
                "\"NAME\" TEXT," + // 2: name
                "\"TIME\" INTEGER NOT NULL ," + // 3: time
                "\"CONTENT\" TEXT," + // 4: content
                "\"GROUP_HEADS\" TEXT);"); // 5: groupHeads
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_SESSION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatSessionEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        Long sessionID = entity.getSessionID();
        if (sessionID != null) {
            stmt.bindLong(2, sessionID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        ArrayList groupHeads = entity.getGroupHeads();
        if (groupHeads != null) {
            stmt.bindString(6, groupHeadsConverter.convertToDatabaseValue(groupHeads));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatSessionEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getType());
 
        Long sessionID = entity.getSessionID();
        if (sessionID != null) {
            stmt.bindLong(2, sessionID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getTime());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        ArrayList groupHeads = entity.getGroupHeads();
        if (groupHeads != null) {
            stmt.bindString(6, groupHeadsConverter.convertToDatabaseValue(groupHeads));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public ChatSessionEntity readEntity(Cursor cursor, int offset) {
        ChatSessionEntity entity = new ChatSessionEntity( //
            cursor.getInt(offset + 0), // type
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // sessionID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : groupHeadsConverter.convertToEntityProperty(cursor.getString(offset + 5)) // groupHeads
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatSessionEntity entity, int offset) {
        entity.setType(cursor.getInt(offset + 0));
        entity.setSessionID(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.getLong(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupHeads(cursor.isNull(offset + 5) ? null : groupHeadsConverter.convertToEntityProperty(cursor.getString(offset + 5)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatSessionEntity entity, long rowId) {
        entity.setSessionID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatSessionEntity entity) {
        if(entity != null) {
            return entity.getSessionID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatSessionEntity entity) {
        return entity.getSessionID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
